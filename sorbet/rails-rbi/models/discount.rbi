# This is an autogenerated file for dynamic methods in Discount
# Please rerun bundle exec rake rails_rbi:models[Discount] to regenerate.

# typed: strong
module Discount::ActiveRelation_WhereNot
  sig { params(opts: T.untyped, rest: T.untyped).returns(T.self_type) }
  def not(opts, *rest); end
end

module Discount::GeneratedAttributeMethods
  sig { returns(ActiveSupport::TimeWithZone) }
  def created_at; end

  sig { params(value: T.any(Date, Time, ActiveSupport::TimeWithZone)).void }
  def created_at=(value); end

  sig { returns(T::Boolean) }
  def created_at?; end

  sig { returns(ActiveSupport::TimeWithZone) }
  def date_end; end

  sig { params(value: T.any(Date, Time, ActiveSupport::TimeWithZone)).void }
  def date_end=(value); end

  sig { returns(T::Boolean) }
  def date_end?; end

  sig { returns(ActiveSupport::TimeWithZone) }
  def date_start; end

  sig { params(value: T.any(Date, Time, ActiveSupport::TimeWithZone)).void }
  def date_start=(value); end

  sig { returns(T::Boolean) }
  def date_start?; end

  sig { returns(Integer) }
  def id; end

  sig { params(value: T.any(Numeric, ActiveSupport::Duration)).void }
  def id=(value); end

  sig { returns(T::Boolean) }
  def id?; end

  sig { returns(Integer) }
  def num_products; end

  sig { params(value: T.any(Numeric, ActiveSupport::Duration)).void }
  def num_products=(value); end

  sig { returns(T::Boolean) }
  def num_products?; end

  sig { returns(T.nilable(Integer)) }
  def pay_only; end

  sig { params(value: T.nilable(T.any(Numeric, ActiveSupport::Duration))).void }
  def pay_only=(value); end

  sig { returns(T::Boolean) }
  def pay_only?; end

  sig { returns(T.nilable(Float)) }
  def price; end

  sig { params(value: T.nilable(T.any(Numeric, ActiveSupport::Duration))).void }
  def price=(value); end

  sig { returns(T::Boolean) }
  def price?; end

  sig { returns(Integer) }
  def product_id; end

  sig { params(value: T.any(Numeric, ActiveSupport::Duration)).void }
  def product_id=(value); end

  sig { returns(T::Boolean) }
  def product_id?; end

  sig { returns(ActiveSupport::TimeWithZone) }
  def updated_at; end

  sig { params(value: T.any(Date, Time, ActiveSupport::TimeWithZone)).void }
  def updated_at=(value); end

  sig { returns(T::Boolean) }
  def updated_at?; end
end

module Discount::GeneratedAssociationMethods
  sig { returns(::Product) }
  def product; end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Product).void)).returns(::Product) }
  def build_product(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Product).void)).returns(::Product) }
  def create_product(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Product).void)).returns(::Product) }
  def create_product!(*args, &block); end

  sig { params(value: ::Product).void }
  def product=(value); end

  sig { returns(::Product) }
  def reload_product; end

  sig { returns(::PaperTrail::Version::ActiveRecord_Associations_CollectionProxy) }
  def versions; end

  sig { returns(T::Array[Integer]) }
  def version_ids; end

  sig { params(value: T::Enumerable[::PaperTrail::Version]).void }
  def versions=(value); end
end

module Discount::CustomFinderMethods
  sig { params(limit: Integer).returns(T::Array[Discount]) }
  def first_n(limit); end

  sig { params(limit: Integer).returns(T::Array[Discount]) }
  def last_n(limit); end

  sig { params(args: T::Array[T.any(Integer, String)]).returns(T::Array[Discount]) }
  def find_n(*args); end

  sig { params(id: T.nilable(Integer)).returns(T.nilable(Discount)) }
  def find_by_id(id); end

  sig { params(id: Integer).returns(Discount) }
  def find_by_id!(id); end
end

class Discount < ApplicationRecord
  include Discount::GeneratedAttributeMethods
  include Discount::GeneratedAssociationMethods
  extend Discount::CustomFinderMethods
  extend Discount::QueryMethodsReturningRelation
  RelationType = T.type_alias { T.any(Discount::ActiveRecord_Relation, Discount::ActiveRecord_Associations_CollectionProxy, Discount::ActiveRecord_AssociationRelation) }
end

module Discount::QueryMethodsReturningRelation
  sig { returns(Discount::ActiveRecord_Relation) }
  def all; end

  sig { params(block: T.nilable(T.proc.void)).returns(Discount::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(Discount::ActiveRecord_Relation) }
  def reselect(*args); end

  sig { params(args: T.untyped).returns(Discount::ActiveRecord_Relation) }
  def order(*args); end

  sig { params(args: T.untyped).returns(Discount::ActiveRecord_Relation) }
  def reorder(*args); end

  sig { params(args: T.untyped).returns(Discount::ActiveRecord_Relation) }
  def group(*args); end

  sig { params(args: T.untyped).returns(Discount::ActiveRecord_Relation) }
  def limit(*args); end

  sig { params(args: T.untyped).returns(Discount::ActiveRecord_Relation) }
  def offset(*args); end

  sig { params(args: T.untyped).returns(Discount::ActiveRecord_Relation) }
  def joins(*args); end

  sig { params(args: T.untyped).returns(Discount::ActiveRecord_Relation) }
  def left_joins(*args); end

  sig { params(args: T.untyped).returns(Discount::ActiveRecord_Relation) }
  def left_outer_joins(*args); end

  sig { params(args: T.untyped).returns(Discount::ActiveRecord_Relation) }
  def where(*args); end

  sig { params(args: T.untyped).returns(Discount::ActiveRecord_Relation) }
  def rewhere(*args); end

  sig { params(args: T.untyped).returns(Discount::ActiveRecord_Relation) }
  def preload(*args); end

  sig { params(args: T.untyped).returns(Discount::ActiveRecord_Relation) }
  def extract_associated(*args); end

  sig { params(args: T.untyped).returns(Discount::ActiveRecord_Relation) }
  def eager_load(*args); end

  sig { params(args: T.untyped).returns(Discount::ActiveRecord_Relation) }
  def includes(*args); end

  sig { params(args: T.untyped).returns(Discount::ActiveRecord_Relation) }
  def from(*args); end

  sig { params(args: T.untyped).returns(Discount::ActiveRecord_Relation) }
  def lock(*args); end

  sig { params(args: T.untyped).returns(Discount::ActiveRecord_Relation) }
  def readonly(*args); end

  sig { params(args: T.untyped).returns(Discount::ActiveRecord_Relation) }
  def or(*args); end

  sig { params(args: T.untyped).returns(Discount::ActiveRecord_Relation) }
  def having(*args); end

  sig { params(args: T.untyped).returns(Discount::ActiveRecord_Relation) }
  def create_with(*args); end

  sig { params(args: T.untyped).returns(Discount::ActiveRecord_Relation) }
  def distinct(*args); end

  sig { params(args: T.untyped).returns(Discount::ActiveRecord_Relation) }
  def references(*args); end

  sig { params(args: T.untyped).returns(Discount::ActiveRecord_Relation) }
  def none(*args); end

  sig { params(args: T.untyped).returns(Discount::ActiveRecord_Relation) }
  def unscope(*args); end

  sig { params(args: T.untyped).returns(Discount::ActiveRecord_Relation) }
  def optimizer_hints(*args); end

  sig { params(args: T.untyped).returns(Discount::ActiveRecord_Relation) }
  def merge(*args); end

  sig { params(args: T.untyped).returns(Discount::ActiveRecord_Relation) }
  def except(*args); end

  sig { params(args: T.untyped).returns(Discount::ActiveRecord_Relation) }
  def only(*args); end

  sig { params(block: T.proc.params(e: Discount).returns(T::Boolean)).returns(T::Array[Discount]) }
  def select(&block); end

  sig { params(args: T.any(String, Symbol, T::Array[T.any(String, Symbol)])).returns(Discount::ActiveRecord_Relation) }
  def select_columns(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Discount::ActiveRecord_Relation) }
  def extending(*args, &block); end

  sig do
    params(
      of: T.nilable(Integer),
      start: T.nilable(Integer),
      finish: T.nilable(Integer),
      load: T.nilable(T::Boolean),
      error_on_ignore: T.nilable(T::Boolean),
      block: T.nilable(T.proc.params(e: Discount::ActiveRecord_Relation).void)
    ).returns(ActiveRecord::Batches::BatchEnumerator)
  end
  def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, &block); end
end

module Discount::QueryMethodsReturningAssociationRelation
  sig { returns(Discount::ActiveRecord_AssociationRelation) }
  def all; end

  sig { params(block: T.nilable(T.proc.void)).returns(Discount::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(Discount::ActiveRecord_AssociationRelation) }
  def reselect(*args); end

  sig { params(args: T.untyped).returns(Discount::ActiveRecord_AssociationRelation) }
  def order(*args); end

  sig { params(args: T.untyped).returns(Discount::ActiveRecord_AssociationRelation) }
  def reorder(*args); end

  sig { params(args: T.untyped).returns(Discount::ActiveRecord_AssociationRelation) }
  def group(*args); end

  sig { params(args: T.untyped).returns(Discount::ActiveRecord_AssociationRelation) }
  def limit(*args); end

  sig { params(args: T.untyped).returns(Discount::ActiveRecord_AssociationRelation) }
  def offset(*args); end

  sig { params(args: T.untyped).returns(Discount::ActiveRecord_AssociationRelation) }
  def joins(*args); end

  sig { params(args: T.untyped).returns(Discount::ActiveRecord_AssociationRelation) }
  def left_joins(*args); end

  sig { params(args: T.untyped).returns(Discount::ActiveRecord_AssociationRelation) }
  def left_outer_joins(*args); end

  sig { params(args: T.untyped).returns(Discount::ActiveRecord_AssociationRelation) }
  def where(*args); end

  sig { params(args: T.untyped).returns(Discount::ActiveRecord_AssociationRelation) }
  def rewhere(*args); end

  sig { params(args: T.untyped).returns(Discount::ActiveRecord_AssociationRelation) }
  def preload(*args); end

  sig { params(args: T.untyped).returns(Discount::ActiveRecord_AssociationRelation) }
  def extract_associated(*args); end

  sig { params(args: T.untyped).returns(Discount::ActiveRecord_AssociationRelation) }
  def eager_load(*args); end

  sig { params(args: T.untyped).returns(Discount::ActiveRecord_AssociationRelation) }
  def includes(*args); end

  sig { params(args: T.untyped).returns(Discount::ActiveRecord_AssociationRelation) }
  def from(*args); end

  sig { params(args: T.untyped).returns(Discount::ActiveRecord_AssociationRelation) }
  def lock(*args); end

  sig { params(args: T.untyped).returns(Discount::ActiveRecord_AssociationRelation) }
  def readonly(*args); end

  sig { params(args: T.untyped).returns(Discount::ActiveRecord_AssociationRelation) }
  def or(*args); end

  sig { params(args: T.untyped).returns(Discount::ActiveRecord_AssociationRelation) }
  def having(*args); end

  sig { params(args: T.untyped).returns(Discount::ActiveRecord_AssociationRelation) }
  def create_with(*args); end

  sig { params(args: T.untyped).returns(Discount::ActiveRecord_AssociationRelation) }
  def distinct(*args); end

  sig { params(args: T.untyped).returns(Discount::ActiveRecord_AssociationRelation) }
  def references(*args); end

  sig { params(args: T.untyped).returns(Discount::ActiveRecord_AssociationRelation) }
  def none(*args); end

  sig { params(args: T.untyped).returns(Discount::ActiveRecord_AssociationRelation) }
  def unscope(*args); end

  sig { params(args: T.untyped).returns(Discount::ActiveRecord_AssociationRelation) }
  def optimizer_hints(*args); end

  sig { params(args: T.untyped).returns(Discount::ActiveRecord_AssociationRelation) }
  def merge(*args); end

  sig { params(args: T.untyped).returns(Discount::ActiveRecord_AssociationRelation) }
  def except(*args); end

  sig { params(args: T.untyped).returns(Discount::ActiveRecord_AssociationRelation) }
  def only(*args); end

  sig { params(block: T.proc.params(e: Discount).returns(T::Boolean)).returns(T::Array[Discount]) }
  def select(&block); end

  sig { params(args: T.any(String, Symbol, T::Array[T.any(String, Symbol)])).returns(Discount::ActiveRecord_AssociationRelation) }
  def select_columns(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Discount::ActiveRecord_AssociationRelation) }
  def extending(*args, &block); end

  sig do
    params(
      of: T.nilable(Integer),
      start: T.nilable(Integer),
      finish: T.nilable(Integer),
      load: T.nilable(T::Boolean),
      error_on_ignore: T.nilable(T::Boolean),
      block: T.nilable(T.proc.params(e: Discount::ActiveRecord_AssociationRelation).void)
    ).returns(ActiveRecord::Batches::BatchEnumerator)
  end
  def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, &block); end
end

class Discount::ActiveRecord_Relation < ActiveRecord::Relation
  include Discount::ActiveRelation_WhereNot
  include Discount::CustomFinderMethods
  include Discount::QueryMethodsReturningRelation
  Elem = type_member(fixed: Discount)
end

class Discount::ActiveRecord_AssociationRelation < ActiveRecord::AssociationRelation
  include Discount::ActiveRelation_WhereNot
  include Discount::CustomFinderMethods
  include Discount::QueryMethodsReturningAssociationRelation
  Elem = type_member(fixed: Discount)
end

class Discount::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include Discount::CustomFinderMethods
  include Discount::QueryMethodsReturningAssociationRelation
  Elem = type_member(fixed: Discount)

  sig { params(records: T.any(Discount, T::Array[Discount])).returns(T.self_type) }
  def <<(*records); end

  sig { params(records: T.any(Discount, T::Array[Discount])).returns(T.self_type) }
  def append(*records); end

  sig { params(records: T.any(Discount, T::Array[Discount])).returns(T.self_type) }
  def push(*records); end

  sig { params(records: T.any(Discount, T::Array[Discount])).returns(T.self_type) }
  def concat(*records); end
end
